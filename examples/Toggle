#!/usr/bin/env python3
# Python Implementation: Toggle
# -*- coding: utf-8 -*-
##
# @version    1.0.0
#
# @par Purpose
#             Toggles a given Pin with given frequency and duty cycle.
#
# @par Comments
#             None
#
# @par Known Bugs
#             None
#
# @author     W. Ekkehard Blanz <Ekkehard.Blanz@gmail.com>
#
# @copyright
#             Copyright (C) 2024 W. Ekkehard Blanz
#             See NOTICE.md and LICENSE.md files that come with this
#             distribution.

# File history:
#
#     Date          | Author         | Modification
#  -----------------+----------------+------------------------------------------
#   Mon Nov 04 2024 | Ekkehard Blanz | created
#

import sys
from time import sleep

from RBPi import GPIO_AL
from ElectricalEngineering import Frequency
from common import idTupleFromFile, printCopyright, \
                   ReturnCodes, parseCommandLine

if "__main__" == __name__:

                       
    NAME, REVISION, YEARS, AUTHORS = idTupleFromFile( __file__ )
    


    def printUsage():
        """!
        @brief Print use message.
        """
        print( 'Synopsis:' )
        print( '\t{0} [<Pin> [frequency> [<dutyCycle]]]'.format( NAME ) )
        print( 'If no frequency is given, 1 Hz is assumed, if no duty cycle' )
        print( 'is given, 50% is assumed.  If no arguments are given at all,' )
        print( 'the user is prompted to enter all of them.\n')
        print( 'As usual, the flags -h and --help as well as -V and --Version' )
        print( 'are also supported.' )
        return



    def main():
        """!
        @brief Main program.
        """
    
        frequency = 1.0
        dutyCycle = 0.5

        # place arguments in argList and flags in flags
        argList, flags = parseCommandLine()

        for flag in flags:
            if flag in ("-h", "--help"):
                printUsage()
                printCopyright( NAME, REVISION, YEARS, AUTHORS )
                return ReturnCodes.SUCCESS_RC
            if flag in ("-V", "--Version"):
                printCopyright( NAME, REVISION, YEARS, AUTHORS )
                return ReturnCodes.SUCCESS_RC
            print( "Wrong flag encountered" )
            return ReturnCodes.PARAMETER_ERROR_RC

        if len( argList ) > 0:
            pin = int( argList[0] )
            if len( argList ) > 1:
                frequency = float( argList[1] )
                if len( argList ) > 2:
                    dutyCycle = float( argList[2] ) / 100.
        else:
            pin = int( input( 'Enter pin to use: ' ) )
            frequency = float( input( 'Enter frequency in Hz: ' ) )
            dutyCycle = float( input( 'Enter duty cycle in %: ' ) ) / 100.

        print( 'Toggling pin {0} at {1} with {2}% duty cycle...'
               .format( pin, Frequency( frequency, 'Hz' ), dutyCycle * 100 ) )
        
        highTime = 1. / frequency * dutyCycle
        lowTime = 1. / frequency * (1. - dutyCycle)

        togglePin = GPIO_AL.IOpin( pin, GPIO_AL.IOpin.OUTPUT )

        try:
            while ( True ):
                togglePin.level = GPIO_AL.IOpin.HIGH
                sleep( highTime )
                togglePin.level = GPIO_AL.IOpin.LOW
                sleep( lowTime )
        except KeyboardInterrupt:
            togglePin.close()
            print( 'Exiting...\n' )

        return ReturnCodes.SUCCESS_RC

    sys.exit( int( main() or 0 ) )
